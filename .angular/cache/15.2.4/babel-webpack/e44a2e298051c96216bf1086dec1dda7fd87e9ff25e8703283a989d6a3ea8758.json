{"ast":null,"code":"import { randomGridPosition } from './gameboard-grid.util';\nexport class Food {\n  constructor(snake) {\n    this.EXPANSION_RATE = 1;\n    this.score = 0;\n    this.snake = snake;\n    this.food = this.getRandomFoodPosition();\n  }\n  update() {\n    if (this.snake.onSnake(this.food)) {\n      this.snake.expandSnake(this.EXPANSION_RATE);\n      this.food = this.getRandomFoodPosition();\n      this.addScore = 1;\n    }\n  }\n  draw(gameBoard) {\n    const foodElement = document.createElement('div');\n    foodElement.style.gridRowStart = this.food.y;\n    foodElement.style.gridColumnStart = this.food.x;\n    foodElement.classList.add('food');\n    gameBoard.appendChild(foodElement);\n  }\n  getRandomFoodPosition() {\n    let newFoodPosition;\n    while (newFoodPosition == null || this.snake.onSnake(newFoodPosition)) {\n      newFoodPosition = randomGridPosition();\n    }\n    return newFoodPosition;\n  }\n  set addScore(val) {\n    this.score += val;\n  }\n  get currentScore() {\n    return this.score;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,kBAAkB,QAAQ,uBAAuB;AAE1D,OAAM,MAAOC,IAAI;EAKfC,YAAYC,KAAU;IAJtB,mBAAc,GAAG,CAAC;IAClB,UAAK,GAAG,CAAC;IAIP,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,IAAI,GAAG,IAAI,CAACC,qBAAqB,EAAE;EAC1C;EAEAC,MAAM;IACJ,IAAI,IAAI,CAACH,KAAK,CAACI,OAAO,CAAC,IAAI,CAACH,IAAI,CAAC,EAAE;MACjC,IAAI,CAACD,KAAK,CAACK,WAAW,CAAC,IAAI,CAACC,cAAc,CAAC;MAC3C,IAAI,CAACL,IAAI,GAAG,IAAI,CAACC,qBAAqB,EAAE;MACxC,IAAI,CAACK,QAAQ,GAAG,CAAC;;EAErB;EAEAC,IAAI,CAACC,SAAc;IACjB,MAAMC,WAAW,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IACjDF,WAAW,CAACG,KAAK,CAACC,YAAY,GAAG,IAAI,CAACb,IAAI,CAACc,CAAC;IAC5CL,WAAW,CAACG,KAAK,CAACG,eAAe,GAAG,IAAI,CAACf,IAAI,CAACgB,CAAC;IAC/CP,WAAW,CAACQ,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IACjCV,SAAS,CAACW,WAAW,CAACV,WAAW,CAAC;EACpC;EAGAR,qBAAqB;IACnB,IAAImB,eAAe;IACnB,OAAOA,eAAe,IAAI,IAAI,IAAI,IAAI,CAACrB,KAAK,CAACI,OAAO,CAACiB,eAAe,CAAC,EAAE;MACrEA,eAAe,GAAGxB,kBAAkB,EAAE;;IAExC,OAAOwB,eAAe;EACxB;EAEA,IAAId,QAAQ,CAACe,GAAW;IACtB,IAAI,CAACC,KAAK,IAAED,GAAG;EACjB;EAEA,IAAIE,YAAY;IACd,OAAO,IAAI,CAACD,KAAK;EACnB","names":["randomGridPosition","Food","constructor","snake","food","getRandomFoodPosition","update","onSnake","expandSnake","EXPANSION_RATE","addScore","draw","gameBoard","foodElement","document","createElement","style","gridRowStart","y","gridColumnStart","x","classList","add","appendChild","newFoodPosition","val","score","currentScore"],"sourceRoot":"","sources":["/home/ganymede/dev/inhouse/snek-app/src/app/game-engine/food.ts"],"sourcesContent":["import { randomGridPosition } from './gameboard-grid.util';\n\nexport class Food {\n  EXPANSION_RATE = 1;\n  score = 0;\n  food: any;\n  snake;\n  constructor(snake: any) {\n    this.snake = snake;\n    this.food = this.getRandomFoodPosition();\n  }\n\n  update() {\n    if (this.snake.onSnake(this.food)) {\n      this.snake.expandSnake(this.EXPANSION_RATE);\n      this.food = this.getRandomFoodPosition();\n      this.addScore = 1;\n    }\n  }\n\n  draw(gameBoard: any) {\n    const foodElement = document.createElement('div');\n    foodElement.style.gridRowStart = this.food.y;\n    foodElement.style.gridColumnStart = this.food.x;\n    foodElement.classList.add('food');\n    gameBoard.appendChild(foodElement);\n  }\n\n\n  getRandomFoodPosition() {\n    let newFoodPosition;\n    while (newFoodPosition == null || this.snake.onSnake(newFoodPosition)) {\n      newFoodPosition = randomGridPosition()\n    }\n    return newFoodPosition;\n  }\n\n  set addScore(val: number) {\n    this.score+=val;\n  }\n\n  get currentScore() {\n    return this.score;\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}