{"ast":null,"code":"import { UserKeyInput } from \"./input\";\nexport const SNAKE_SPEED = 7;\nexport class Snake {\n  constructor() {\n    this.snakeBody = [{\n      x: 11,\n      y: 11\n    }];\n    this.newSegments = 0;\n    this.input = new UserKeyInput();\n  }\n  listenToInputs() {\n    this.input.getInputs();\n  }\n  update() {\n    this.addSegments();\n    const inputDirection = this.input.getInputDirection();\n    for (let i = this.snakeBody.length - 2; i >= 0; i--) {\n      this.snakeBody[i + 1] = {\n        ...this.snakeBody[i]\n      };\n    }\n    this.snakeBody[0].x += inputDirection.x;\n    this.snakeBody[0].y += inputDirection.y;\n  }\n  draw(gameBoard) {\n    this.snakeBody.forEach(segment => {\n      const snakeElement = document.createElement('div');\n      snakeElement.style.gridRowStart = segment.y.toString();\n      snakeElement.style.gridColumnStart = segment.x.toString();\n      snakeElement.classList.add('snake');\n      gameBoard.appendChild(snakeElement);\n    });\n  }\n  expandSnake(amount) {\n    this.newSegments += amount;\n  }\n  getSnakeHead() {\n    return this.snakeBody[0];\n  }\n  snakeIntersection() {\n    return this.onSnake(this.snakeBody[0], {\n      ignoreHead: true\n    });\n  }\n  onSnake(position, {\n    ignoreHead = false\n  } = {}) {\n    return this.snakeBody.some((segment, index) => {\n      if (ignoreHead && index === 0) return false;\n      return this.equalPositions(segment, position);\n    });\n  }\n  equalPositions(pos1, pos2) {\n    return pos1.x === pos2.x && pos1.y === pos2.y;\n  }\n  addSegments() {\n    for (let i = 0; i < this.newSegments; i++) {\n      this.snakeBody.push({\n        ...this.snakeBody[this.snakeBody.length - 1]\n      });\n    }\n    this.newSegments = 0;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAY,QAAQ,SAAS;AAEtC,OAAO,MAAMC,WAAW,GAAG,CAAC;AAE5B,OAAM,MAAOC,KAAK;EAAlBC;IACE,cAAS,GAAG,CACV;MAAEC,CAAC,EAAE,EAAE;MAAEC,CAAC,EAAE;IAAE,CAAE,CACjB;IAED,gBAAW,GAAG,CAAC;IACf,UAAK,GAAG,IAAIL,YAAY,EAAE;EA0D5B;EAxDEM,cAAc;IACZ,IAAI,CAACC,KAAK,CAACC,SAAS,EAAE;EACxB;EAEAC,MAAM;IACJ,IAAI,CAACC,WAAW,EAAE;IAClB,MAAMC,cAAc,GAAI,IAAI,CAACJ,KAAK,CAACK,iBAAiB,EAAE;IACtD,KAAK,IAAIC,CAAC,GAAG,IAAI,CAACC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAEF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACnD,IAAI,CAACC,SAAS,CAACD,CAAC,GAAG,CAAC,CAAC,GAAG;QAAE,GAAG,IAAI,CAACC,SAAS,CAACD,CAAC;MAAC,CAAE;;IAElD,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC,CAACV,CAAC,IAAIO,cAAc,CAACP,CAAC;IACvC,IAAI,CAACU,SAAS,CAAC,CAAC,CAAC,CAACT,CAAC,IAAIM,cAAc,CAACN,CAAC;EACzC;EAEAW,IAAI,CAACC,SAAc;IACjB,IAAI,CAACH,SAAS,CAACI,OAAO,CAACC,OAAO,IAAG;MAC/B,MAAMC,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MAClDF,YAAY,CAACG,KAAK,CAACC,YAAY,GAAGL,OAAO,CAACd,CAAC,CAACoB,QAAQ,EAAE;MACtDL,YAAY,CAACG,KAAK,CAACG,eAAe,GAAGP,OAAO,CAACf,CAAC,CAACqB,QAAQ,EAAE;MACzDL,YAAY,CAACO,SAAS,CAACC,GAAG,CAAC,OAAO,CAAC;MACnCX,SAAS,CAACY,WAAW,CAACT,YAAY,CAAC;IACrC,CAAC,CAAC;EACJ;EAEAU,WAAW,CAACC,MAAc;IACxB,IAAI,CAACC,WAAW,IAAID,MAAM;EAC5B;EAEAE,YAAY;IACV,OAAO,IAAI,CAACnB,SAAS,CAAC,CAAC,CAAC;EAC1B;EAEAoB,iBAAiB;IACf,OAAO,IAAI,CAACC,OAAO,CAAC,IAAI,CAACrB,SAAS,CAAC,CAAC,CAAC,EAAE;MAAEsB,UAAU,EAAE;IAAI,CAAE,CAAC;EAC9D;EAGAD,OAAO,CAACE,QAAa,EAAE;IAAED,UAAU,GAAG;EAAK,CAAE,GAAG,EAAE;IAChD,OAAO,IAAI,CAACtB,SAAS,CAACwB,IAAI,CAAC,CAACnB,OAAO,EAAEoB,KAAK,KAAI;MAC5C,IAAIH,UAAU,IAAIG,KAAK,KAAK,CAAC,EAAE,OAAO,KAAK;MAC3C,OAAO,IAAI,CAACC,cAAc,CAACrB,OAAO,EAAEkB,QAAQ,CAAC;IAC/C,CAAC,CAAC;EACJ;EAEAG,cAAc,CAACC,IAAS,EAAEC,IAAS;IACjC,OAAOD,IAAI,CAACrC,CAAC,KAAKsC,IAAI,CAACtC,CAAC,IAAIqC,IAAI,CAACpC,CAAC,KAAKqC,IAAI,CAACrC,CAAC;EAC/C;EAEAK,WAAW;IACT,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACmB,WAAW,EAAEnB,CAAC,EAAE,EAAE;MACzC,IAAI,CAACC,SAAS,CAAC6B,IAAI,CAAC;QAAE,GAAG,IAAI,CAAC7B,SAAS,CAAC,IAAI,CAACA,SAAS,CAACC,MAAM,GAAG,CAAC;MAAC,CAAE,CAAC;;IAGvE,IAAI,CAACiB,WAAW,GAAG,CAAC;EACtB","names":["UserKeyInput","SNAKE_SPEED","Snake","constructor","x","y","listenToInputs","input","getInputs","update","addSegments","inputDirection","getInputDirection","i","snakeBody","length","draw","gameBoard","forEach","segment","snakeElement","document","createElement","style","gridRowStart","toString","gridColumnStart","classList","add","appendChild","expandSnake","amount","newSegments","getSnakeHead","snakeIntersection","onSnake","ignoreHead","position","some","index","equalPositions","pos1","pos2","push"],"sourceRoot":"","sources":["/home/ganymede/dev/inhouse/snek-app/snek-front/src/app/game-engine/snake.ts"],"sourcesContent":["import { UserKeyInput } from \"./input\";\n\nexport const SNAKE_SPEED = 7;\n\nexport class Snake {\n  snakeBody = [\n    { x: 11, y: 11 }\n  ];\n\n  newSegments = 0\n  input = new UserKeyInput();\n\n  listenToInputs() {\n    this.input.getInputs();\n  }\n\n  update() {\n    this.addSegments();\n    const inputDirection =  this.input.getInputDirection();\n    for (let i = this.snakeBody.length - 2; i >= 0; i--) {\n      this.snakeBody[i + 1] = { ...this.snakeBody[i] }\n    }\n    this.snakeBody[0].x += inputDirection.x;\n    this.snakeBody[0].y += inputDirection.y;\n  }\n\n  draw(gameBoard: any) {\n    this.snakeBody.forEach(segment => {\n      const snakeElement = document.createElement('div');\n      snakeElement.style.gridRowStart = segment.y.toString();\n      snakeElement.style.gridColumnStart = segment.x.toString();\n      snakeElement.classList.add('snake');\n      gameBoard.appendChild(snakeElement);\n    });\n  }\n\n  expandSnake(amount: number) {\n    this.newSegments += amount;\n  }\n\n  getSnakeHead() {\n    return this.snakeBody[0];\n  }\n\n  snakeIntersection() {\n    return this.onSnake(this.snakeBody[0], { ignoreHead: true });\n  }\n\n\n  onSnake(position: any, { ignoreHead = false } = {}) {\n    return this.snakeBody.some((segment, index) => {\n      if (ignoreHead && index === 0) return false;\n      return this.equalPositions(segment, position);\n    })\n  }\n\n  equalPositions(pos1: any, pos2: any) {\n    return pos1.x === pos2.x && pos1.y === pos2.y;\n  }\n\n  addSegments() {\n    for (let i = 0; i < this.newSegments; i++) {\n      this.snakeBody.push({ ...this.snakeBody[this.snakeBody.length - 1] });\n    }\n\n    this.newSegments = 0;\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}